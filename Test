1. 修改SSH工具类：

• 保持SshUtil类基本结构不变，但为了方便单独操作每台服务器，我们可以提供一个方法，该方法接受特定服务器的索引。

• 同时，ServerInfo类保持之前的定义，用于存储服务器的连接信息。
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;

class ServerInfo {
    String host;
    int port;
    String username;
    String password;

    public ServerInfo(String host, int port, String username, String password) {
        this.host = host;
        this.port = port;
        this.username = username;
        this.password = password;
    }
}

public class SshUtil {

    private final List<ServerInfo> serverInfos;

    public SshUtil(List<ServerInfo> serverInfos) {
        this.serverInfos = serverInfos;
    }

    public String executeCommand(int serverIndex, String command) {
        if (serverIndex < 0 || serverIndex >= serverInfos.size()) {
            return "Invalid server index";
        }
        ServerInfo serverInfo = serverInfos.get(serverIndex);
        List<String> sshCommand = new ArrayList<>();
        if (serverInfo.password!= null) {
            sshCommand.add("sshpass");
            sshCommand.add("-p");
            sshCommand.add(serverInfo.password);
        }
        sshCommand.add("ssh");
        if (serverInfo.password!= null) {
            sshCommand.add("-o");
            sshCommand.add("StrictHostKeyChecking=no");
        }
        sshCommand.add(serverInfo.username + "@" + serverInfo.host);
        sshCommand.add(command);

        try {
            ProcessBuilder processBuilder = new ProcessBuilder(sshCommand);
            Process process = processBuilder.start();

            BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
            StringBuilder output = new StringBuilder();
            String line;
            while ((line = reader.readLine())!= null) {
                output.append(line).append("\n");
            }

            int exitCode = process.waitFor();
            if (exitCode!= 0) {
                BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));
                StringBuilder errorOutput = new StringBuilder();
                while ((line = errorReader.readLine())!= null) {
                    errorOutput.append(line).append("\n");
                }
                return "Command execution failed on " + serverInfo.host + " with exit code " + exitCode + "\n" + errorOutput;
            }
            return output.toString();
        } catch (IOException | InterruptedException e) {
            e.printStackTrace();
            return "Error executing command on " + serverInfo.host + ": " + e.getMessage();
        }
    }
}
2. 修改Swing GUI界面：

• 在AppControlGUI类中，我们需要为每台服务器创建单独的启动、停止和查看日志按钮。

• 当按钮被点击时，调用SshUtil中对应服务器索引的方法来执行相应的命令。
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;

public class AppControlGUI {
    private final SshUtil sshUtil;
    private final LogReader logReader;
    private JTextArea outputTextArea;

    public AppControlGUI() {
        List<ServerInfo> serverInfos = new ArrayList<>();
        // 假设7台服务器的信息，根据实际情况修改
        serverInfos.add(new ServerInfo("server1.example.com", 22, "user1", "password1"));
        serverInfos.add(new ServerInfo("server2.example.com", 22, "user2", "password2"));
        serverInfos.add(new ServerInfo("server3.example.com", 22, "user3", "password3"));
        serverInfos.add(new ServerInfo("server4.example.com", 22, "user4", "password4"));
        serverInfos.add(new ServerInfo("server5.example.com", 22, "user5", "password5"));
        serverInfos.add(new ServerInfo("server6.example.com", 22, "user6", "password6"));
        serverInfos.add(new ServerInfo("server7.example.com", 22, "user7", "password7"));

        sshUtil = new SshUtil(serverInfos);
        logReader = new LogReader();

        JFrame frame = new JFrame("App Control");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(1200, 800);

        JPanel panel = new JPanel();
        panel.setLayout(new BorderLayout());

        JPanel buttonPanel = new JPanel();
        buttonPanel.setLayout(new GridLayout(7, 3));

        for (int i = 0; i < serverInfos.size(); i++) {
            int serverIndex = i;
            JButton startButton = new JButton("Start Server " + (i + 1));
            JButton stopButton = new JButton("Stop Server " + (i + 1));
            JButton logButton = new JButton("Get Log Server " + (i + 1));

            startButton.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    String command = "path/to/your/startup/script.sh";
                    String result = sshUtil.executeCommand(serverIndex, command);
                    outputTextArea.setText(result);
                }
            });

            stopButton.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    String command = "path/to/your/shutdown/script.sh";
                    String result = sshUtil.executeCommand(serverIndex, command);
                    outputTextArea.setText(result);
                }
            });

            logButton.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    String logFilePath = "path/to/your/log/file.log";
                    String command = "cat " + logFilePath;
                    String log = sshUtil.executeCommand(serverIndex, command);
                    outputTextArea.setText(log);
                }
            });

            buttonPanel.add(startButton);
            buttonPanel.add(stopButton);
            buttonPanel.add(logButton);
        }

        outputTextArea = new JTextArea();
        outputTextArea.setEditable(false);
        JScrollPane scrollPane = new JScrollPane(outputTextArea);

        panel.add(buttonPanel, BorderLayout.NORTH);
        panel.add(scrollPane, BorderLayout.CENTER);

        frame.add(panel);
        frame.setVisible(true);
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                new AppControlGUI();
            }
        });
    }
}
3. 日志读取类保持不变：

• LogReader类和之前一样，用于读取本地日志文件内容，在当前场景下，通过SshUtil远程获取日志文件内容，LogReader类本身无需修改。
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

public class LogReader {
    public String readLogFile(String filePath) {
        StringBuilder content = new StringBuilder();
        try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {
            String line;
            while ((line = br.readLine())!= null) {
                content.append(line).append("\n");
            }
        } catch (IOException e) {
            e.printStackTrace();
            return "Error reading log file: " + e.getMessage();
        }
        return content.toString();
    }
}
此代码实现了对7台服务器的单独操作，每个服务器都有对应的启动、停止和查看日志按钮。你需要根据实际的服务器信息和脚本路径调整代码。如果使用SSH免密登录，可以将ServerInfo中的密码字段设为null，并删除SshUtil中sshpass相关的代码。
